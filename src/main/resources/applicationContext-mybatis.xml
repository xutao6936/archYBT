<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd"
	default-lazy-init="true">
	<description>mybatis公共配置 </description>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath:com/topcheer/ybt/**/dao/mapping/*.xml" />
		<property name="plugins">
			<ref bean="pageInterceptor" />
		</property>
	</bean>

	<bean id="pageInterceptor" class="com.github.pagehelper.PageHelper">
		<property name="properties">
			<value>
				dialect=oracle<!-- 数据库类型，4.0.0以后版本可以不设置该参数 -->
				offsetAsPageNum=true<!-- 该参数默认为false,设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用,和startPage中的pageNum效果一样 -->
				rowBoundsWithCount=true<!-- 该参数默认为false,设置为true时，使用RowBounds分页会进行count查询 -->
				pageSizeZero=true<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
				reasonable=true<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用，启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页，禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
				supportMethodsArguments=false<!-- 支持通过Mapper接口参数来传递分页参数 -->
				returnPageInfo=none<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			</value>
		</property>
	</bean>


	<!--<bean id="pageInterceptor" class="com.topcheer.ybt.util.PageInterceptor"/> -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.topcheer.ybt" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!--开发环境 -->
	<beans profile="develop">
		<context:property-placeholder ignore-resource-not-found="true" ignore-unresolvable="true"
			location="classpath*:/application.local.properties" order="0"/>
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/application.properties" order="1"/>
			<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" lazy-init="false">
     <!-- 驱动名称 -->
        <property name="driverClassName" value="${dataSource.driverClassName}" />
        <!-- JDBC连接串 -->
        <property name="url"
            value="${dataSource.url}" />
        <!-- 数据库用户名称 -->
        <property name="username" value="${dataSource.username}" />
        <!-- 数据库密码 -->
        <property name="password" value="${dataSource.password}" />
         <!-- 初始化连接数量 -->
        <property name="initialSize" value="${dataSource.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${dataSource.maxActive}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${dataSource.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${dataSource.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${dataSource.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${dataSource.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${dataSource.poolPreparedStatements}" />    
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                
	                开启Druid的监控统计功能用的filter:stat
	                日志用的filter:log4j
	               防御SQL注入的filter:wall -->
        <property name="filters" value="${dataSource.filters}" /> 
       
    </bean> 


		<!-- 初始化数据表结构 与默认数据 <jdbc:initialize-database data-source="dataSource" 
			ignore-failures="ALL"> <jdbc:script location="classpath:sql/h2/schema.sql" 
			/> <jdbc:script location="classpath:data/h2/import-data.sql" encoding="UTF-8"/> 
			</jdbc:initialize-database> -->
	</beans>
	<!--生产环境 -->
	<beans profile="production">
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/application.properties,
          			  classpath*:/application.local.properties" />
		<!-- JNDI方式配置数据源 -->
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName" value="${jndiName}"></property>
		</bean>
	</beans>

</beans>